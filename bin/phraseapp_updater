#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'phraseapp_updater'

class PhraseAppUpdaterCLI < Thor
  class_option :default_locale, type: :string, default: 'en',   desc: 'PhraseApp default locale'
  class_option :file_format,    type: :string, default: 'json', desc: 'Filetype of localization files.'
  class_option :verbose,        type: :boolean, default: false, desc: 'Verbose output'

  # Common method options

  def self.phraseapp_api_key_method_option
    method_option :phraseapp_api_key, type: :string, required: true, desc: 'PhraseApp API key.'
  end

  def self.phraseapp_method_options
    phraseapp_api_key_method_option
    method_option :phraseapp_project_name, type: :string, required: true, desc: 'Name for new PhraseApp project.'
  end

  def self.parent_commit_method_option
    method_option :parent_commit, type: :string, required: true, desc: 'git commit hash of initial locales'
  end

  desc 'setup <locale_path>',
       'Create a new PhraseApp project, initializing it with locale files at <locale_path>. the new project ID is printed to STDOUT'

  phraseapp_method_options
  parent_commit_method_option

  def setup(locales_path)
    validate_readable_path!('locales', locales_path)

    handle_errors do
      updater, project_id = PhraseAppUpdater.for_new_project(
                 options[:phraseapp_api_key],
                 options[:phraseapp_project_name],
                 options[:file_format],
                 options[:parent_commit],
                 verbose: options[:verbose])

      updater.upload_directory(locales_path)

      puts project_id
    end
  end

  desc 'lookup', 'Lookup a phraseapp project by name'
  method_option :phraseapp_api_key,      type: :string, required: true, desc: 'PhraseApp API key.'
  method_option :phraseapp_project_name, type: :string, required: true, desc: 'Name for new PhraseApp project.'

  def lookup
    handle_errors do
      project_id = PhraseAppUpdater.lookup_project(
        options[:phraseapp_api_key],
        options[:phraseapp_project_name])

      puts project_id
    end
  end

  desc 'synchronize <git_checkout_path>',
       'Synchronize locales in PhraseApp with those in local checkout'
  phraseapp_method_options
  method_option :branch,    type: :string, required: false,           desc: 'Name of (remote) git branch to synchronize'
  method_option :remote,    type: :string, required: false,           desc: 'Name of git remote to synchronize with'
  method_option :prefix,    type: :string, default: 'config/locales', desc: 'Path prefix in git branch for locale files'
  method_option :no_commit, type: :boolean, default: false,           desc: 'Do not commit merge results to the branch'

  def synchronize(checkout_path)
    validate_writable_path!('checkout path', checkout_path)

    handle_errors do
      updater = build_updater
      updater.synchronize(checkout_path,
                          options[:prefix],
                          no_commit: options[:no_commit],
                          branch: options[:branch],
                          remote: options[:remote])
    end
  end

  desc 'download <target_path>',
       'Download and renormalize locale files from PhraseApp to <target_path>'

  phraseapp_method_options

  def download(target_path)
    validate_writable_path!('target path', target_path)

    handle_errors do
      updater = build_updater
      updater.download_to_directory(target_path)
      parent_commit = updater.read_parent_commit

      if parent_commit.nil?
        STDERR.puts 'Error: Locales downloaded from phraseapp, but parent commit details missing'
        exit(1)
      end

      puts parent_commit
    end
  end

  desc 'upload <locale_path>',
       'Renormalize and upload locale files at <locale_path> to PhraseApp, replacing current contents.'

  phraseapp_method_options
  parent_commit_method_option

  def upload(source_path)
    validate_readable_path!('source path', source_path)

    handle_errors do
      updater = build_updater
      updater.upload_directory(source_path)
      updater.update_parent_commit(options[:parent_commit])
    end
  end

  desc 'update_parent_commit',
       'Record a new merge-base on PhraseApp without changing contents.'

  phraseapp_method_options
  parent_commit_method_option

  def update_parent_commit
    handle_errors do
      updater = build_updater
      updater.update_parent_commit(options[:parent_commit])
    end
  end

  desc 'diff <path1> <path2>',
       'Compare locale file directories <path1> and <path2>'

  long_desc <<-LONGDESC
    Perform a JSON diff of locale files in path1 and path2.
    Exits with 1 if there were differences, or 0 if no differences"
  LONGDESC

  method_option :quiet, type: :boolean, default: false, desc: 'Suppress output'

  def diff(path1, path2)
    validate_readable_path!('path1', path1)
    validate_readable_path!('path2', path2)

    handle_errors do
      updater = PhraseAppUpdater.new(nil, nil, options[:file_format], verbose: options[:verbose])
      diffs = updater.diff_directories(path1, path2)
      if diffs.empty?
        exit(0)
      else
        print_diff(diffs) unless options[:quiet]
        exit(1)
      end
    end
  end

  desc 'merge <ancestor_path> <our_path> <their_path>',
       '3-way merge locale file directories <ancestor_path>, <our_path>, <their_path> into TO.'

  long_desc <<-LONGDESC
    Perform a JSON-aware 3-way merge of locale files in directories <ancestor_path>, <our_path>, <their_path> into TO.

    The merge resolution strategy always selects `ours` in the case of a conflict.
  LONGDESC

  method_option :to, type: :string, required: true, desc: 'Target directory'

  def merge(ancestor_path, our_path, their_path)
    validate_readable_path!('ancestor_path', ancestor_path)
    validate_readable_path!('our_path', our_path)
    validate_readable_path!('their_path', their_path)

    result_path = options[:to]
    validate_writable_path!('to', result_path)

    handle_errors do
      updater = PhraseAppUpdater.new(nil, nil, options[:file_format], verbose: options[:verbose])
      updater.merge_directories(our_path, their_path, ancestor_path, result_path)
    end
  end

  desc 'merge_file <ancestor> <ours> <theirs>',
       'Perform 3-way merge of a single file into TO'

  long_desc <<-LONGDESC
    Perform 3-way merge of a single file into TO

    Intended for use as a git merge-driver with:
      [merge "phraseapp-locale"]
        name = PhraseApp locale file merge driver
        driver = phraseapp_updater merge_file %O %A %B --to %P
  LONGDESC

  method_option :to, type: :string, required: true, desc: 'Target file'

  def merge_file(ancestor, ours, theirs)
    validate_readable_file!('ancestor', ancestor)
    validate_readable_file!('ours', ours)
    validate_readable_file!('theirs', theirs)
    validate_writable_file!('to', to)

    # Git provides an empty file when there is no common ancestor in the
    # merge-base. Because we want to merge from an empty hash structure instead,
    # pass `nil` to `merge_files`.
    ancestor = nil if File.zero?(ancestor)

    updater = PhraseAppUpdater.new(nil, nil, file_format, verbose: options[:verbose])
    updater.merge_files(ours, theirs, ancestor, to)
  end

  desc 'default', 'Prints gem information'
  option :version, aliases: [:v]

  def default
    if options[:v] || options[:version]
      puts PhraseAppUpdater::VERSION
    else
      help
    end
  end

  default_command :default

  private

  def print_diff(diffs)
    normalized_diffs = diffs.flat_map do |diff|
      type, path, c1, c2 = diff
      if type == '~'
        [['-', path, c1], ['+', path, c2]]
      else
        [diff]
      end
    end

    normalized_diffs.each do |type, path, change|
      puts "#{type} #{path}: #{change}"
    end
  end

  def build_updater
    PhraseAppUpdater.new(
      options[:phraseapp_api_key],
      options[:phraseapp_project_id],
      options[:file_format],
      verbose: options[:verbose])
  end

  def handle_errors
    yield
  rescue PhraseAppUpdater::PhraseAppAPI::BadAPIKeyError
    STDERR.puts 'Bad PhraseApp API key.'
    exit(1)
  rescue PhraseAppUpdater::PhraseAppAPI::ProjectNotFoundError => e
    STDERR.puts "PhraseApp project not found: '#{e.name}'"
    exit(1)
  rescue PhraseAppUpdater::PhraseAppAPI::BadProjectIDError => e
    STDERR.puts "Bad PhraseApp project ID: #{e.project_id}"
    exit(1)
  rescue PhraseAppUpdater::PhraseAppAPI::ProjectNameTakenError
    STDERR.puts "PhraseApp project name already taken: #{options[:phraseapp_project_name]}"
    exit(1)
  rescue PhraseAppUpdater::LocaleFile::BadFileTypeError => e
    STDERR.puts "Bad filetype for localization files: #{e.message}"
    exit(1)
  rescue PhraseAppUpdater::PhraseAppAPI::MissingGitParentError
    STDERR.puts 'Git ancestor commit not recorded on PhraseApp project'
    exit(1)
  rescue PhraseAppUpdater::SynchronizeError => e
    STDERR.puts "Synchronization task failed: #{e.status}"
    exit(1)
  rescue StandardError => e
    STDERR.puts "Unknown error occurred: #{e.message}"
    STDERR.puts e.backtrace
    exit(1)
  end

  def validate_readable_file!(name, file)
    unless File.readable?(file) && File.file?(file)
      raise RuntimeError.new("#{name} is not a readable file: #{file}")
    end
  end

  def validate_writable_file!(name, file)
    unless File.writable?(file) && File.file?(file)
      raise RuntimeError.new("#{name} is not a writable file: #{file}")
    end
  end

  def validate_path!(name, path)
    if path.empty?
      raise RuntimeError.new("#{name} was empty.")
    end
  end

  def validate_readable_path!(name, path)
    validate_path!(name, path)

    unless File.readable?(path) && File.directory?(path)
      raise RuntimeError.new("#{name} path is not a readable directory: #{path}")
    end
  end

  def validate_writable_path!(name, path)
    validate_path!(name, path)

    unless File.writable?(path) && File.directory?(path)
      raise RuntimeError.new("#{name} path is not a writable directory: #{path}")
    end
  end

  def sh(x)
    `#{x}`.tap do
      raise RuntimeError.new("Shell command failed: '#{x}'") unless $?.success?
    end
  end
end

PhraseAppUpdaterCLI.start(ARGV)
